//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2407
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TheSite.SchemiXSD {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DsGestioneSpazi : DataSet {
        
        private tabellinaDataTable tabletabellina;
        
        private parametriDataTable tableparametri;
        
        private tabellina2DataTable tabletabellina2;
        
        public DsGestioneSpazi() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DsGestioneSpazi(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["tabellina"] != null)) {
                    this.Tables.Add(new tabellinaDataTable(ds.Tables["tabellina"]));
                }
                if ((ds.Tables["parametri"] != null)) {
                    this.Tables.Add(new parametriDataTable(ds.Tables["parametri"]));
                }
                if ((ds.Tables["tabellina2"] != null)) {
                    this.Tables.Add(new tabellina2DataTable(ds.Tables["tabellina2"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tabellinaDataTable tabellina {
            get {
                return this.tabletabellina;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public parametriDataTable parametri {
            get {
                return this.tableparametri;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tabellina2DataTable tabellina2 {
            get {
                return this.tabletabellina2;
            }
        }
        
        public override DataSet Clone() {
            DsGestioneSpazi cln = ((DsGestioneSpazi)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["tabellina"] != null)) {
                this.Tables.Add(new tabellinaDataTable(ds.Tables["tabellina"]));
            }
            if ((ds.Tables["parametri"] != null)) {
                this.Tables.Add(new parametriDataTable(ds.Tables["parametri"]));
            }
            if ((ds.Tables["tabellina2"] != null)) {
                this.Tables.Add(new tabellina2DataTable(ds.Tables["tabellina2"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tabletabellina = ((tabellinaDataTable)(this.Tables["tabellina"]));
            if ((this.tabletabellina != null)) {
                this.tabletabellina.InitVars();
            }
            this.tableparametri = ((parametriDataTable)(this.Tables["parametri"]));
            if ((this.tableparametri != null)) {
                this.tableparametri.InitVars();
            }
            this.tabletabellina2 = ((tabellina2DataTable)(this.Tables["tabellina2"]));
            if ((this.tabletabellina2 != null)) {
                this.tabletabellina2.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DsGestioneSpazi";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DsGestioneSpazi.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tabletabellina = new tabellinaDataTable();
            this.Tables.Add(this.tabletabellina);
            this.tableparametri = new parametriDataTable();
            this.Tables.Add(this.tableparametri);
            this.tabletabellina2 = new tabellina2DataTable();
            this.Tables.Add(this.tabletabellina2);
        }
        
        private bool ShouldSerializetabellina() {
            return false;
        }
        
        private bool ShouldSerializeparametri() {
            return false;
        }
        
        private bool ShouldSerializetabellina2() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void tabellinaRowChangeEventHandler(object sender, tabellinaRowChangeEvent e);
        
        public delegate void parametriRowChangeEventHandler(object sender, parametriRowChangeEvent e);
        
        public delegate void tabellina2RowChangeEventHandler(object sender, tabellina2RowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tabellinaDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnlabel;
            
            private DataColumn columnvalore_int;
            
            internal tabellinaDataTable() : 
                    base("tabellina") {
                this.InitClass();
            }
            
            internal tabellinaDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn labelColumn {
                get {
                    return this.columnlabel;
                }
            }
            
            internal DataColumn valore_intColumn {
                get {
                    return this.columnvalore_int;
                }
            }
            
            public tabellinaRow this[int index] {
                get {
                    return ((tabellinaRow)(this.Rows[index]));
                }
            }
            
            public event tabellinaRowChangeEventHandler tabellinaRowChanged;
            
            public event tabellinaRowChangeEventHandler tabellinaRowChanging;
            
            public event tabellinaRowChangeEventHandler tabellinaRowDeleted;
            
            public event tabellinaRowChangeEventHandler tabellinaRowDeleting;
            
            public void AddtabellinaRow(tabellinaRow row) {
                this.Rows.Add(row);
            }
            
            public tabellinaRow AddtabellinaRow(string label, System.Decimal valore_int) {
                tabellinaRow rowtabellinaRow = ((tabellinaRow)(this.NewRow()));
                rowtabellinaRow.ItemArray = new object[] {
                        label,
                        valore_int};
                this.Rows.Add(rowtabellinaRow);
                return rowtabellinaRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                tabellinaDataTable cln = ((tabellinaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new tabellinaDataTable();
            }
            
            internal void InitVars() {
                this.columnlabel = this.Columns["label"];
                this.columnvalore_int = this.Columns["valore_int"];
            }
            
            private void InitClass() {
                this.columnlabel = new DataColumn("label", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlabel);
                this.columnvalore_int = new DataColumn("valore_int", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvalore_int);
            }
            
            public tabellinaRow NewtabellinaRow() {
                return ((tabellinaRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new tabellinaRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(tabellinaRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tabellinaRowChanged != null)) {
                    this.tabellinaRowChanged(this, new tabellinaRowChangeEvent(((tabellinaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tabellinaRowChanging != null)) {
                    this.tabellinaRowChanging(this, new tabellinaRowChangeEvent(((tabellinaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tabellinaRowDeleted != null)) {
                    this.tabellinaRowDeleted(this, new tabellinaRowChangeEvent(((tabellinaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tabellinaRowDeleting != null)) {
                    this.tabellinaRowDeleting(this, new tabellinaRowChangeEvent(((tabellinaRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovetabellinaRow(tabellinaRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tabellinaRow : DataRow {
            
            private tabellinaDataTable tabletabellina;
            
            internal tabellinaRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletabellina = ((tabellinaDataTable)(this.Table));
            }
            
            public string label {
                get {
                    try {
                        return ((string)(this[this.tabletabellina.labelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tabletabellina.labelColumn] = value;
                }
            }
            
            public System.Decimal valore_int {
                get {
                    try {
                        return ((System.Decimal)(this[this.tabletabellina.valore_intColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tabletabellina.valore_intColumn] = value;
                }
            }
            
            public bool IslabelNull() {
                return this.IsNull(this.tabletabellina.labelColumn);
            }
            
            public void SetlabelNull() {
                this[this.tabletabellina.labelColumn] = System.Convert.DBNull;
            }
            
            public bool Isvalore_intNull() {
                return this.IsNull(this.tabletabellina.valore_intColumn);
            }
            
            public void Setvalore_intNull() {
                this[this.tabletabellina.valore_intColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tabellinaRowChangeEvent : EventArgs {
            
            private tabellinaRow eventRow;
            
            private DataRowAction eventAction;
            
            public tabellinaRowChangeEvent(tabellinaRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public tabellinaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class parametriDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnedifici;
            
            private DataColumn columnpiano;
            
            private DataColumn columnstanza;
            
            private DataColumn columncategoria;
            
            private DataColumn columndestUso;
            
            private DataColumn columnreparto;
            
            private DataColumn columnopMq;
            
            private DataColumn columnMq;
            
            internal parametriDataTable() : 
                    base("parametri") {
                this.InitClass();
            }
            
            internal parametriDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn edificiColumn {
                get {
                    return this.columnedifici;
                }
            }
            
            internal DataColumn pianoColumn {
                get {
                    return this.columnpiano;
                }
            }
            
            internal DataColumn stanzaColumn {
                get {
                    return this.columnstanza;
                }
            }
            
            internal DataColumn categoriaColumn {
                get {
                    return this.columncategoria;
                }
            }
            
            internal DataColumn destUsoColumn {
                get {
                    return this.columndestUso;
                }
            }
            
            internal DataColumn repartoColumn {
                get {
                    return this.columnreparto;
                }
            }
            
            internal DataColumn opMqColumn {
                get {
                    return this.columnopMq;
                }
            }
            
            internal DataColumn MqColumn {
                get {
                    return this.columnMq;
                }
            }
            
            public parametriRow this[int index] {
                get {
                    return ((parametriRow)(this.Rows[index]));
                }
            }
            
            public event parametriRowChangeEventHandler parametriRowChanged;
            
            public event parametriRowChangeEventHandler parametriRowChanging;
            
            public event parametriRowChangeEventHandler parametriRowDeleted;
            
            public event parametriRowChangeEventHandler parametriRowDeleting;
            
            public void AddparametriRow(parametriRow row) {
                this.Rows.Add(row);
            }
            
            public parametriRow AddparametriRow(string edifici, string piano, string stanza, string categoria, string destUso, string reparto, string opMq, string Mq) {
                parametriRow rowparametriRow = ((parametriRow)(this.NewRow()));
                rowparametriRow.ItemArray = new object[] {
                        edifici,
                        piano,
                        stanza,
                        categoria,
                        destUso,
                        reparto,
                        opMq,
                        Mq};
                this.Rows.Add(rowparametriRow);
                return rowparametriRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                parametriDataTable cln = ((parametriDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new parametriDataTable();
            }
            
            internal void InitVars() {
                this.columnedifici = this.Columns["edifici"];
                this.columnpiano = this.Columns["piano"];
                this.columnstanza = this.Columns["stanza"];
                this.columncategoria = this.Columns["categoria"];
                this.columndestUso = this.Columns["destUso"];
                this.columnreparto = this.Columns["reparto"];
                this.columnopMq = this.Columns["opMq"];
                this.columnMq = this.Columns["Mq"];
            }
            
            private void InitClass() {
                this.columnedifici = new DataColumn("edifici", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnedifici);
                this.columnpiano = new DataColumn("piano", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpiano);
                this.columnstanza = new DataColumn("stanza", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstanza);
                this.columncategoria = new DataColumn("categoria", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncategoria);
                this.columndestUso = new DataColumn("destUso", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndestUso);
                this.columnreparto = new DataColumn("reparto", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnreparto);
                this.columnopMq = new DataColumn("opMq", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnopMq);
                this.columnMq = new DataColumn("Mq", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMq);
            }
            
            public parametriRow NewparametriRow() {
                return ((parametriRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new parametriRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(parametriRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.parametriRowChanged != null)) {
                    this.parametriRowChanged(this, new parametriRowChangeEvent(((parametriRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.parametriRowChanging != null)) {
                    this.parametriRowChanging(this, new parametriRowChangeEvent(((parametriRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.parametriRowDeleted != null)) {
                    this.parametriRowDeleted(this, new parametriRowChangeEvent(((parametriRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.parametriRowDeleting != null)) {
                    this.parametriRowDeleting(this, new parametriRowChangeEvent(((parametriRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveparametriRow(parametriRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class parametriRow : DataRow {
            
            private parametriDataTable tableparametri;
            
            internal parametriRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableparametri = ((parametriDataTable)(this.Table));
            }
            
            public string edifici {
                get {
                    try {
                        return ((string)(this[this.tableparametri.edificiColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableparametri.edificiColumn] = value;
                }
            }
            
            public string piano {
                get {
                    try {
                        return ((string)(this[this.tableparametri.pianoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableparametri.pianoColumn] = value;
                }
            }
            
            public string stanza {
                get {
                    try {
                        return ((string)(this[this.tableparametri.stanzaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableparametri.stanzaColumn] = value;
                }
            }
            
            public string categoria {
                get {
                    try {
                        return ((string)(this[this.tableparametri.categoriaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableparametri.categoriaColumn] = value;
                }
            }
            
            public string destUso {
                get {
                    try {
                        return ((string)(this[this.tableparametri.destUsoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableparametri.destUsoColumn] = value;
                }
            }
            
            public string reparto {
                get {
                    try {
                        return ((string)(this[this.tableparametri.repartoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableparametri.repartoColumn] = value;
                }
            }
            
            public string opMq {
                get {
                    try {
                        return ((string)(this[this.tableparametri.opMqColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableparametri.opMqColumn] = value;
                }
            }
            
            public string Mq {
                get {
                    try {
                        return ((string)(this[this.tableparametri.MqColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableparametri.MqColumn] = value;
                }
            }
            
            public bool IsedificiNull() {
                return this.IsNull(this.tableparametri.edificiColumn);
            }
            
            public void SetedificiNull() {
                this[this.tableparametri.edificiColumn] = System.Convert.DBNull;
            }
            
            public bool IspianoNull() {
                return this.IsNull(this.tableparametri.pianoColumn);
            }
            
            public void SetpianoNull() {
                this[this.tableparametri.pianoColumn] = System.Convert.DBNull;
            }
            
            public bool IsstanzaNull() {
                return this.IsNull(this.tableparametri.stanzaColumn);
            }
            
            public void SetstanzaNull() {
                this[this.tableparametri.stanzaColumn] = System.Convert.DBNull;
            }
            
            public bool IscategoriaNull() {
                return this.IsNull(this.tableparametri.categoriaColumn);
            }
            
            public void SetcategoriaNull() {
                this[this.tableparametri.categoriaColumn] = System.Convert.DBNull;
            }
            
            public bool IsdestUsoNull() {
                return this.IsNull(this.tableparametri.destUsoColumn);
            }
            
            public void SetdestUsoNull() {
                this[this.tableparametri.destUsoColumn] = System.Convert.DBNull;
            }
            
            public bool IsrepartoNull() {
                return this.IsNull(this.tableparametri.repartoColumn);
            }
            
            public void SetrepartoNull() {
                this[this.tableparametri.repartoColumn] = System.Convert.DBNull;
            }
            
            public bool IsopMqNull() {
                return this.IsNull(this.tableparametri.opMqColumn);
            }
            
            public void SetopMqNull() {
                this[this.tableparametri.opMqColumn] = System.Convert.DBNull;
            }
            
            public bool IsMqNull() {
                return this.IsNull(this.tableparametri.MqColumn);
            }
            
            public void SetMqNull() {
                this[this.tableparametri.MqColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class parametriRowChangeEvent : EventArgs {
            
            private parametriRow eventRow;
            
            private DataRowAction eventAction;
            
            public parametriRowChangeEvent(parametriRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public parametriRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tabellina2DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnlabel;
            
            private DataColumn columnvalore_int;
            
            private DataColumn columnedificio;
            
            private DataColumn columnpiano;
            
            private DataColumn columnLordo;
            
            private DataColumn columnNetto;
            
            private DataColumn columnMura;
            
            private DataColumn columnOrdine;
            
            internal tabellina2DataTable() : 
                    base("tabellina2") {
                this.InitClass();
            }
            
            internal tabellina2DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn labelColumn {
                get {
                    return this.columnlabel;
                }
            }
            
            internal DataColumn valore_intColumn {
                get {
                    return this.columnvalore_int;
                }
            }
            
            internal DataColumn edificioColumn {
                get {
                    return this.columnedificio;
                }
            }
            
            internal DataColumn pianoColumn {
                get {
                    return this.columnpiano;
                }
            }
            
            internal DataColumn LordoColumn {
                get {
                    return this.columnLordo;
                }
            }
            
            internal DataColumn NettoColumn {
                get {
                    return this.columnNetto;
                }
            }
            
            internal DataColumn MuraColumn {
                get {
                    return this.columnMura;
                }
            }
            
            internal DataColumn OrdineColumn {
                get {
                    return this.columnOrdine;
                }
            }
            
            public tabellina2Row this[int index] {
                get {
                    return ((tabellina2Row)(this.Rows[index]));
                }
            }
            
            public event tabellina2RowChangeEventHandler tabellina2RowChanged;
            
            public event tabellina2RowChangeEventHandler tabellina2RowChanging;
            
            public event tabellina2RowChangeEventHandler tabellina2RowDeleted;
            
            public event tabellina2RowChangeEventHandler tabellina2RowDeleting;
            
            public void Addtabellina2Row(tabellina2Row row) {
                this.Rows.Add(row);
            }
            
            public tabellina2Row Addtabellina2Row(string label, System.Decimal valore_int, string edificio, string piano, System.Decimal Lordo, System.Decimal Netto, System.Decimal Mura, long Ordine) {
                tabellina2Row rowtabellina2Row = ((tabellina2Row)(this.NewRow()));
                rowtabellina2Row.ItemArray = new object[] {
                        label,
                        valore_int,
                        edificio,
                        piano,
                        Lordo,
                        Netto,
                        Mura,
                        Ordine};
                this.Rows.Add(rowtabellina2Row);
                return rowtabellina2Row;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                tabellina2DataTable cln = ((tabellina2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new tabellina2DataTable();
            }
            
            internal void InitVars() {
                this.columnlabel = this.Columns["label"];
                this.columnvalore_int = this.Columns["valore_int"];
                this.columnedificio = this.Columns["edificio"];
                this.columnpiano = this.Columns["piano"];
                this.columnLordo = this.Columns["Lordo"];
                this.columnNetto = this.Columns["Netto"];
                this.columnMura = this.Columns["Mura"];
                this.columnOrdine = this.Columns["Ordine"];
            }
            
            private void InitClass() {
                this.columnlabel = new DataColumn("label", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlabel);
                this.columnvalore_int = new DataColumn("valore_int", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvalore_int);
                this.columnedificio = new DataColumn("edificio", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnedificio);
                this.columnpiano = new DataColumn("piano", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpiano);
                this.columnLordo = new DataColumn("Lordo", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLordo);
                this.columnNetto = new DataColumn("Netto", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNetto);
                this.columnMura = new DataColumn("Mura", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMura);
                this.columnOrdine = new DataColumn("Ordine", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrdine);
            }
            
            public tabellina2Row Newtabellina2Row() {
                return ((tabellina2Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new tabellina2Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(tabellina2Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tabellina2RowChanged != null)) {
                    this.tabellina2RowChanged(this, new tabellina2RowChangeEvent(((tabellina2Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tabellina2RowChanging != null)) {
                    this.tabellina2RowChanging(this, new tabellina2RowChangeEvent(((tabellina2Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tabellina2RowDeleted != null)) {
                    this.tabellina2RowDeleted(this, new tabellina2RowChangeEvent(((tabellina2Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tabellina2RowDeleting != null)) {
                    this.tabellina2RowDeleting(this, new tabellina2RowChangeEvent(((tabellina2Row)(e.Row)), e.Action));
                }
            }
            
            public void Removetabellina2Row(tabellina2Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tabellina2Row : DataRow {
            
            private tabellina2DataTable tabletabellina2;
            
            internal tabellina2Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletabellina2 = ((tabellina2DataTable)(this.Table));
            }
            
            public string label {
                get {
                    try {
                        return ((string)(this[this.tabletabellina2.labelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tabletabellina2.labelColumn] = value;
                }
            }
            
            public System.Decimal valore_int {
                get {
                    try {
                        return ((System.Decimal)(this[this.tabletabellina2.valore_intColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tabletabellina2.valore_intColumn] = value;
                }
            }
            
            public string edificio {
                get {
                    try {
                        return ((string)(this[this.tabletabellina2.edificioColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tabletabellina2.edificioColumn] = value;
                }
            }
            
            public string piano {
                get {
                    try {
                        return ((string)(this[this.tabletabellina2.pianoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tabletabellina2.pianoColumn] = value;
                }
            }
            
            public System.Decimal Lordo {
                get {
                    try {
                        return ((System.Decimal)(this[this.tabletabellina2.LordoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tabletabellina2.LordoColumn] = value;
                }
            }
            
            public System.Decimal Netto {
                get {
                    try {
                        return ((System.Decimal)(this[this.tabletabellina2.NettoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tabletabellina2.NettoColumn] = value;
                }
            }
            
            public System.Decimal Mura {
                get {
                    try {
                        return ((System.Decimal)(this[this.tabletabellina2.MuraColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tabletabellina2.MuraColumn] = value;
                }
            }
            
            public long Ordine {
                get {
                    try {
                        return ((long)(this[this.tabletabellina2.OrdineColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tabletabellina2.OrdineColumn] = value;
                }
            }
            
            public bool IslabelNull() {
                return this.IsNull(this.tabletabellina2.labelColumn);
            }
            
            public void SetlabelNull() {
                this[this.tabletabellina2.labelColumn] = System.Convert.DBNull;
            }
            
            public bool Isvalore_intNull() {
                return this.IsNull(this.tabletabellina2.valore_intColumn);
            }
            
            public void Setvalore_intNull() {
                this[this.tabletabellina2.valore_intColumn] = System.Convert.DBNull;
            }
            
            public bool IsedificioNull() {
                return this.IsNull(this.tabletabellina2.edificioColumn);
            }
            
            public void SetedificioNull() {
                this[this.tabletabellina2.edificioColumn] = System.Convert.DBNull;
            }
            
            public bool IspianoNull() {
                return this.IsNull(this.tabletabellina2.pianoColumn);
            }
            
            public void SetpianoNull() {
                this[this.tabletabellina2.pianoColumn] = System.Convert.DBNull;
            }
            
            public bool IsLordoNull() {
                return this.IsNull(this.tabletabellina2.LordoColumn);
            }
            
            public void SetLordoNull() {
                this[this.tabletabellina2.LordoColumn] = System.Convert.DBNull;
            }
            
            public bool IsNettoNull() {
                return this.IsNull(this.tabletabellina2.NettoColumn);
            }
            
            public void SetNettoNull() {
                this[this.tabletabellina2.NettoColumn] = System.Convert.DBNull;
            }
            
            public bool IsMuraNull() {
                return this.IsNull(this.tabletabellina2.MuraColumn);
            }
            
            public void SetMuraNull() {
                this[this.tabletabellina2.MuraColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrdineNull() {
                return this.IsNull(this.tabletabellina2.OrdineColumn);
            }
            
            public void SetOrdineNull() {
                this[this.tabletabellina2.OrdineColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tabellina2RowChangeEvent : EventArgs {
            
            private tabellina2Row eventRow;
            
            private DataRowAction eventAction;
            
            public tabellina2RowChangeEvent(tabellina2Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public tabellina2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
